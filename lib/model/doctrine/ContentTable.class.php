<?php

/**
 * ContentTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContentTable extends Doctrine_Table
{
  protected $inheritedClasses = array('GovermentNew','CitizenProposal','GovermentProposal','GovermentConsultation','Workshop','CitizenAction');
  protected $select = 'id, created_at, views, active, latitude, longitude';
  /**
   * Returns an instance of this class.
   *
   * @return object ContentTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Content');
  }
    
  public function getActive($limit = null)
  {
    $q = self::getActiveQuery();
    if ($limit) {
      $q->limit($limit);
    }
 
    return $q->execute();
  }
 
  public function getActiveQuery()
  {
    $q = self::createQuery('c')
      ->where('c.active = 1')
      ->addOrderBy('c.created_at desc');
 
    return $q;
  }
  
  public function getSqlUnion($order = null, $inheritedClasses = null, $categories = null, $regions = null, $where = 'active = 1', $or = false) {
    $sql = '';
    $select = $this->select;
    
    if (!$inheritedClasses) $inheritedClasses = $this->inheritedClasses;
    
    $subQueryCat = array();
    if ($categories) {
      $ccs = Doctrine_core::getTable('ContentHasCategory')->createQuery('cc')->whereIn('cc.category_id',(array)$categories)->andWhereIn('cc.type',$inheritedClasses)->orderBy('cc.type')->execute();
      foreach ($ccs as $cc) {
        if (!isset($subQueryCat[$cc->getType()])) $subQueryCat[$cc->getType()] = array();
        $subQueryCat[$cc->getType()][$cc->getContentId()] = $cc->getContentId();
      }
    }
    
    $subQueryReg = array();
    if ($regions) {
      $crs = Doctrine_core::getTable('ContentHasRegion')->createQuery('cr')->whereIn('cr.region_id',(array)$regions)->andWhereIn('cr.type',$inheritedClasses)->orderBy('cr.type')->execute();
      foreach ($crs as $cr) {
        if (!isset($subQueryReg[$cr->getType()])) $subQueryReg[$cr->getType()] = array();
        $subQueryReg[$cr->getType()][$cr->getContentId()] = $cr->getContentId();
      }
    }
    
    if ($regions && $categories) {
      //$subQuery = array_intersect_assoc($subQueryCat,$subQueryReg);
      // We want all contents that are in categories or in regions
      if ($or) {
        $subQuery = array_merge($subQueryCat,$subQueryReg);
      }
      // We want all contents that are in categories and in regions at the same time
      else $subQuery = $this->array_intersect_assoc_recursive($subQueryCat,$subQueryReg);
    }
    elseif ($categories) {
      $subQuery = $subQueryCat;
    }
    elseif ($regions) {
      $subQuery = $subQueryReg;
    }
    
    if (!$categories && !$regions) {
      foreach ($inheritedClasses as $key=>$class) {
        if ($key) $sql .= ' UNION ';
        $sql .= "( SELECT '$class' as class,".$select.' FROM '.Doctrine::getTable($class)->getTableName();
        if ($where) {
          $sql .= ' WHERE '.$where;
        }
        $sql .= ') ';
      }
    }
    else {
      $first = true;
      foreach ($inheritedClasses as $key=>$class) {
        if (isset($subQuery[$class])) {
          if ($first) {
            $first = false;
          }
          else $sql .= ' UNION ';
          $sql .= "(SELECT '$class' as class,".$select.' FROM '.Doctrine::getTable($class)->getTableName().' where id IN ('.implode(',',$subQuery[$class]).')';
          if ($where) {
            $sql .= ' AND '.$where;
          }
          $sql .= ') ';
        }
      }
      if ($first) $sql = "SELECT 'Content' as class,".$select.' FROM content ';
    }
    
    if ($order) {
      $sql .= ' '.$order;
    }
    else {
      $sql .= ' ORDER BY created_at DESC';
    }
    return $sql;
  }
  
  public function getObjectsUnion($order = null, $inheritedClasses = null, $categories = null, $regions = null, $where = 'active = 1', $or = false) {
    $objects = array();
    $sql = $this->getSqlUnion($order, $inheritedClasses, $categories, $regions, $where, $or);
    $conn = Doctrine_Manager::connection();
    $pdo = $conn->execute($sql);
    $pdo->setFetchMode(Doctrine_Core::FETCH_ASSOC);
    $items = $pdo->fetchAll();

    foreach ($items as $item) {
      $class = $item['class'];
      unset ($item['class']);
      $object = new $class;
      $object->assignIdentifier($item['id']);
      $objects[] = $object;
    }
    return $objects;
  }
  
  protected function array_intersect_assoc_recursive($arr1, $arr2) {
    if (!is_array($arr1) || !is_array($arr2)) {
      if ($arr1 == $arr2) {
        return $arr1;
      }
      else return null;
    }
    $commonkeys = array_intersect_assoc($arr1, $arr2);
    $ret = array();
    foreach ($commonkeys as $key=>$value) {
        $ret[$key] = $this->array_intersect_assoc_recursive($arr1[$key], $arr2[$key]);
    }
    return $ret;
  }
}