<?php

/**
 * BaseOpinion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $opinion
 * @property integer $opinion_possibility_id
 * @property string $object_class
 * @property integer $object_id
 * @property boolean $innapropiate
 * @property boolean $selected
 * @property integer $user_id
 * @property OpinionPossibility $OpinionPossibility
 * @property sfGuardUser $sfGuardUser
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $OpinionLike
 * @property Doctrine_Collection $OpinionMarkedAsSpam
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method string              getOpinion()                Returns the current record's "opinion" value
 * @method integer             getOpinionPossibilityId()   Returns the current record's "opinion_possibility_id" value
 * @method string              getObjectClass()            Returns the current record's "object_class" value
 * @method integer             getObjectId()               Returns the current record's "object_id" value
 * @method boolean             getInnapropiate()           Returns the current record's "innapropiate" value
 * @method boolean             getSelected()               Returns the current record's "selected" value
 * @method integer             getUserId()                 Returns the current record's "user_id" value
 * @method OpinionPossibility  getOpinionPossibility()     Returns the current record's "OpinionPossibility" value
 * @method sfGuardUser         getSfGuardUser()            Returns the current record's "sfGuardUser" value
 * @method Doctrine_Collection getUsers()                  Returns the current record's "Users" collection
 * @method Doctrine_Collection getOpinionLike()            Returns the current record's "OpinionLike" collection
 * @method Doctrine_Collection getOpinionMarkedAsSpam()    Returns the current record's "OpinionMarkedAsSpam" collection
 * @method Opinion             setId()                     Sets the current record's "id" value
 * @method Opinion             setOpinion()                Sets the current record's "opinion" value
 * @method Opinion             setOpinionPossibilityId()   Sets the current record's "opinion_possibility_id" value
 * @method Opinion             setObjectClass()            Sets the current record's "object_class" value
 * @method Opinion             setObjectId()               Sets the current record's "object_id" value
 * @method Opinion             setInnapropiate()           Sets the current record's "innapropiate" value
 * @method Opinion             setSelected()               Sets the current record's "selected" value
 * @method Opinion             setUserId()                 Sets the current record's "user_id" value
 * @method Opinion             setOpinionPossibility()     Sets the current record's "OpinionPossibility" value
 * @method Opinion             setSfGuardUser()            Sets the current record's "sfGuardUser" value
 * @method Opinion             setUsers()                  Sets the current record's "Users" collection
 * @method Opinion             setOpinionLike()            Sets the current record's "OpinionLike" collection
 * @method Opinion             setOpinionMarkedAsSpam()    Sets the current record's "OpinionMarkedAsSpam" collection
 * 
 * @package    demofony
 * @subpackage model
 * @author     Marc Montañés <marc@teclliure.net>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOpinion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('opinion');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('opinion', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('opinion_possibility_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('object_class', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('object_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('innapropiate', 'boolean', null, array(
             'default' => 0,
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('selected', 'boolean', null, array(
             'default' => 0,
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('IX_Opinion_1', array(
             'fields' => 
             array(
              0 => 'object_class',
              1 => 'object_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('OpinionPossibility', array(
             'local' => 'opinion_possibility_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('sfGuardUser as Users', array(
             'refClass' => 'OpinionMarkedAsSpam',
             'local' => 'opinion_id',
             'foreign' => 'user_id'));

        $this->hasMany('OpinionLike', array(
             'local' => 'id',
             'foreign' => 'opinion_id'));

        $this->hasMany('OpinionMarkedAsSpam', array(
             'local' => 'id',
             'foreign' => 'opinion_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $commentable0 = new Doctrine_Template_Commentable();
        $this->actAs($timestampable0);
        $this->actAs($commentable0);
    }
}