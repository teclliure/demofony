<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $first_name
 * @property string $last_name
 * @property string $email_address
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $Permissions
 * @property Doctrine_Collection $Actions
 * @property Doctrine_Collection $Opinions
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardRememberKey $RememberKeys
 * @property sfGuardForgotPassword $ForgotPassword
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Opinion
 * @property Doctrine_Collection $OpinionLike
 * @property Doctrine_Collection $OpinionMarkedAsSpam
 * @property sfGuardUserProfile $Profile
 * @property Doctrine_Collection $Content
 * @property Doctrine_Collection $VirtualMeeting
 * @property Doctrine_Collection $VirtualMeetingAnswer
 * @property Doctrine_Collection $ActionHasUser
 * 
 * @method integer               getId()                    Returns the current record's "id" value
 * @method string                getFirstName()             Returns the current record's "first_name" value
 * @method string                getLastName()              Returns the current record's "last_name" value
 * @method string                getEmailAddress()          Returns the current record's "email_address" value
 * @method string                getUsername()              Returns the current record's "username" value
 * @method string                getAlgorithm()             Returns the current record's "algorithm" value
 * @method string                getSalt()                  Returns the current record's "salt" value
 * @method string                getPassword()              Returns the current record's "password" value
 * @method boolean               getIsActive()              Returns the current record's "is_active" value
 * @method boolean               getIsSuperAdmin()          Returns the current record's "is_super_admin" value
 * @method timestamp             getLastLogin()             Returns the current record's "last_login" value
 * @method Doctrine_Collection   getGroups()                Returns the current record's "Groups" collection
 * @method Doctrine_Collection   getPermissions()           Returns the current record's "Permissions" collection
 * @method Doctrine_Collection   getActions()               Returns the current record's "Actions" collection
 * @method Doctrine_Collection   getOpinions()              Returns the current record's "Opinions" collection
 * @method Doctrine_Collection   getSfGuardUserPermission() Returns the current record's "sfGuardUserPermission" collection
 * @method Doctrine_Collection   getSfGuardUserGroup()      Returns the current record's "sfGuardUserGroup" collection
 * @method sfGuardRememberKey    getRememberKeys()          Returns the current record's "RememberKeys" value
 * @method sfGuardForgotPassword getForgotPassword()        Returns the current record's "ForgotPassword" value
 * @method Doctrine_Collection   getComments()              Returns the current record's "Comments" collection
 * @method Doctrine_Collection   getOpinion()               Returns the current record's "Opinion" collection
 * @method Doctrine_Collection   getOpinionLike()           Returns the current record's "OpinionLike" collection
 * @method Doctrine_Collection   getOpinionMarkedAsSpam()   Returns the current record's "OpinionMarkedAsSpam" collection
 * @method sfGuardUserProfile    getProfile()               Returns the current record's "Profile" value
 * @method Doctrine_Collection   getContent()               Returns the current record's "Content" collection
 * @method Doctrine_Collection   getVirtualMeeting()        Returns the current record's "VirtualMeeting" collection
 * @method Doctrine_Collection   getVirtualMeetingAnswer()  Returns the current record's "VirtualMeetingAnswer" collection
 * @method Doctrine_Collection   getActionHasUser()         Returns the current record's "ActionHasUser" collection
 * @method sfGuardUser           setId()                    Sets the current record's "id" value
 * @method sfGuardUser           setFirstName()             Sets the current record's "first_name" value
 * @method sfGuardUser           setLastName()              Sets the current record's "last_name" value
 * @method sfGuardUser           setEmailAddress()          Sets the current record's "email_address" value
 * @method sfGuardUser           setUsername()              Sets the current record's "username" value
 * @method sfGuardUser           setAlgorithm()             Sets the current record's "algorithm" value
 * @method sfGuardUser           setSalt()                  Sets the current record's "salt" value
 * @method sfGuardUser           setPassword()              Sets the current record's "password" value
 * @method sfGuardUser           setIsActive()              Sets the current record's "is_active" value
 * @method sfGuardUser           setIsSuperAdmin()          Sets the current record's "is_super_admin" value
 * @method sfGuardUser           setLastLogin()             Sets the current record's "last_login" value
 * @method sfGuardUser           setGroups()                Sets the current record's "Groups" collection
 * @method sfGuardUser           setPermissions()           Sets the current record's "Permissions" collection
 * @method sfGuardUser           setActions()               Sets the current record's "Actions" collection
 * @method sfGuardUser           setOpinions()              Sets the current record's "Opinions" collection
 * @method sfGuardUser           setSfGuardUserPermission() Sets the current record's "sfGuardUserPermission" collection
 * @method sfGuardUser           setSfGuardUserGroup()      Sets the current record's "sfGuardUserGroup" collection
 * @method sfGuardUser           setRememberKeys()          Sets the current record's "RememberKeys" value
 * @method sfGuardUser           setForgotPassword()        Sets the current record's "ForgotPassword" value
 * @method sfGuardUser           setComments()              Sets the current record's "Comments" collection
 * @method sfGuardUser           setOpinion()               Sets the current record's "Opinion" collection
 * @method sfGuardUser           setOpinionLike()           Sets the current record's "OpinionLike" collection
 * @method sfGuardUser           setOpinionMarkedAsSpam()   Sets the current record's "OpinionMarkedAsSpam" collection
 * @method sfGuardUser           setProfile()               Sets the current record's "Profile" value
 * @method sfGuardUser           setContent()               Sets the current record's "Content" collection
 * @method sfGuardUser           setVirtualMeeting()        Sets the current record's "VirtualMeeting" collection
 * @method sfGuardUser           setVirtualMeetingAnswer()  Sets the current record's "VirtualMeetingAnswer" collection
 * @method sfGuardUser           setActionHasUser()         Sets the current record's "ActionHasUser" collection
 * 
 * @package    demofony
 * @subpackage model
 * @author     Marc Montañés <marc@teclliure.net>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BasesfGuardUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('email_address', 'string', 255, array(
             'unique' => true,
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('username', 'string', 128, array(
             'unique' => true,
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'default' => 'sha1',
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'default' => 1,
             'type' => 'boolean',
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'default' => false,
             'type' => 'boolean',
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardGroup as Groups', array(
             'refClass' => 'sfGuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as Permissions', array(
             'refClass' => 'sfGuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('Content as Actions', array(
             'refClass' => 'ActionHasUser',
             'local' => 'user_id',
             'foreign' => 'action_id'));

        $this->hasMany('Opinion as Opinions', array(
             'refClass' => 'OpinionMarkedAsSpam',
             'local' => 'user_id',
             'foreign' => 'opinion_id'));

        $this->hasMany('sfGuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardForgotPassword as ForgotPassword', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Opinion', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('OpinionLike', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('OpinionMarkedAsSpam', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardUserProfile as Profile', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Content', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('VirtualMeeting', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('VirtualMeetingAnswer', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ActionHasUser', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}